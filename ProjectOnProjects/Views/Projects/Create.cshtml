@model ProjectOnProjects.BusinessLogic.Implementation.ProjectService.Models.ProjectModel

@{
    ViewData["Title"] = "Create Project";
    Layout = null;
}


<head>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
</head>

<style>

    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body {
        min-height: 100vh;
        background-color: white;
        font-family: system-ui, -apple-system, sans-serif;
    }

    .page-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1.5rem 2rem;
        background-color: white;
    }

    .logo {
        font-size: 1.5rem;
        font-weight: bold;
        font-family: serif;
        text-decoration: underline;
    }

    .timer {
        font-family: monospace;
        font-size: 1.2rem;
        color: #374151;
        font-weight: bold;
    }

    .timeline-container {
        position: relative;
        margin: 4rem 0;
        padding: 0 2rem;
    }

    .timeline {
        height: 2px;
        background-color: #ccc;
        position: relative;
    }

    .project-marker {
        position: absolute;
        top: -10px;
        background: #f0f0f0;
        padding: 0.5rem;
        border-radius: 4px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .timeline-indicator {
        position: absolute;
        top: -5px;
        width: 10px;
        height: 10px;
    }

        .timeline-indicator.green {
            background: #4CAF50;
            left: 10%;
        }

        .timeline-indicator.red {
            background: #f44336;
            left: 50%;
        }

    .calendar-container {
        background: #f8f9fa;
        padding: 1rem;
        border-radius: 8px;
        margin-bottom: 1rem;
    }

    .calendar-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1rem;
    }

    .calendar-grid {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
        gap: 5px;
    }

    .calendar-day {
        text-align: center;
        padding: 0.5rem;
        font-size: 0.9rem;
        cursor: pointer;
        border-radius: 4px;
        transition: background-color 0.2s;
    }

        .calendar-day:not(.empty):hover {
            background-color: #e9ecef;
        }

        .calendar-day.selected {
            background: #007bff;
            color: white;
        }

        .calendar-day.in-range {
            background: #cfe2ff;
            color: #0056b3;
        }

    .calendar-weekday {
        font-weight: bold;
        color: #666;
    }

    .nav-circle {
        width: 40px;
        height: 40px;
        border: 2px solid #4CAF50;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        background: white;
    }

    .info-box {
        background: #f5f5f5;
        padding: 1rem;
        border-radius: 4px;
        margin-bottom: 1rem;
    }

    .btn-success {
        background-color: white;
        color: black;
        border: 1px solid black;
    }

        .btn-success:hover {
            background-color: black;
            color: white;
        }
</style>

<header class="page-header">
    <img src="~/images/logo.png" alt="Logo" height="50" class="top-left" />
    <div class="timer" id="timer">00:00:00 09.02.2025</div>
</header>

<div class="container">
    <div class="d-flex justify-content-between align-items-center mb-4" style="transform: translateX(50%)">
        <img src="~/images/add.png" alt="ADD" height="70" />
    </div>

    <div class="timeline-container">
        <div class="timeline">
            <div class="project-marker" style="left: 10%;">@Model.NumeProiect</div>
            <div class="timeline-indicator green"></div>
            <div class="timeline-indicator red"></div>
        </div>
    </div>

    <form method="post" asp-action="Create" enctype="multipart/form-data">
        <div class="row">
            <!-- Project Information -->
            <div class="col-md-4">
                <div class="info-box">
                    <div class="form-group">
                        <label asp-for="NumeProiect" class="control-label">Project Name</label>
                        <input asp-for="NumeProiect" class="form-control" />
                        <span asp-validation-for="NumeProiect" class="text-danger"></span>
                    </div>
                    <div class="form-group mt-3">
                        <label asp-for="DetaliiProiect" class="control-label">Project Details</label>
                        <textarea asp-for="DetaliiProiect" class="form-control" rows="3"></textarea>
                        <span asp-validation-for="DetaliiProiect" class="text-danger"></span>
                    </div>
                    <div class="form-group mt-3">
                        <label asp-for="FisierProiect" class="control-label">Project File</label>
                        <input type="file" asp-for="FisierProiect" class="form-control" />
                        <span asp-validation-for="FisierProiect" class="text-danger"></span>
                    </div>
                </div>
            </div>

            <!-- Calendar -->
            <div class="col-md-4">
                <div class="calendar-container">
                    <div class="calendar-header">
                        <button type="button" class="btn btn-link" id="prevMonth">‹</button>
                        <span id="currentMonth"></span>
                        <button type="button" class="btn btn-link" id="nextMonth">›</button>
                    </div>
                    <div class="calendar-grid" id="calendarGrid"></div>
                    <input type="hidden" asp-for="DataStart" id="startDate" />
                    <input type="hidden" asp-for="DataSfarsit" id="endDate" />
                </div>
            </div>

            <!-- Competition Information -->
            <div class="col-md-4">
                <div class="info-box">
                    <div class="form-group">
                        <label asp-for="InformatiiCompetitie" class="control-label">Competition Information</label>
                        <textarea asp-for="InformatiiCompetitie" class="form-control" rows="3"></textarea>
                        <span asp-validation-for="InformatiiCompetitie" class="text-danger"></span>
                    </div>
                    <div class="form-group mt-3">
                        <label asp-for="OrganizatieInstitutie" class="control-label">Organization/Institution</label>
                        <input asp-for="OrganizatieInstitutie" class="form-control" />
                        <span asp-validation-for="OrganizatieInstitutie" class="text-danger"></span>
                    </div>
                    <div class="form-group mt-3">
                        <label asp-for="LinkSite" class="control-label">Website Link</label>
                        <input asp-for="LinkSite" class="form-control" />
                        <span asp-validation-for="LinkSite" class="text-danger"></span>
                    </div>
                </div>
            </div>
        </div>

        <div class="row mt-4">
            <div class="col-12">
                <button type="submit" class="btn btn-success">Save</button>
            </div>
        </div>
    </form>
</div>
<script>
    function updateTimer() {
           const now = new Date();
           const timeStr = now.toLocaleTimeString('en-GB', {
               hour12: false,
               hour: '2-digit',
               minute: '2-digit',
               second: '2-digit'
           });
           const dateStr = now.toLocaleDateString('en-GB', {
               day: '2-digit',
               month: '2-digit',
               year: 'numeric'
           }).replace(/\//g, '.');

           document.getElementById('timer').textContent = `${timeStr} ${dateStr}`;
       }

       updateTimer();
       setInterval(updateTimer, 1000);
</script>

<script>
    class Calendar {
        constructor() {
            this.currentDate = new Date();
            this.selectedStartDate = null;
            this.selectedEndDate = null;
            this.init();
        }

        init() {
            this.renderCalendar();
            this.attachEventListeners();
        }

        renderCalendar() {
            const grid = document.getElementById('calendarGrid');
            grid.innerHTML = '';
            const weekdays = ['Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su'];
            weekdays.forEach(day => {
                const dayElement = document.createElement('div');
                dayElement.className = 'calendar-day calendar-weekday';
                dayElement.textContent = day;
                grid.appendChild(dayElement);
            });

            const year = this.currentDate.getFullYear();
            const month = this.currentDate.getMonth();
            const firstDay = new Date(year, month, 1);
            const lastDay = new Date(year, month + 1, 0);

            let firstDayIndex = firstDay.getDay() || 7;
            for (let i = 1; i < firstDayIndex; i++) {
                const emptyDay = document.createElement('div');
                emptyDay.className = 'calendar-day empty';
                grid.appendChild(emptyDay);
            }

            for (let day = 1; day <= lastDay.getDate(); day++) {
                const dayElement = document.createElement('div');
                dayElement.className = 'calendar-day';
                dayElement.textContent = day;

                const currentDayDate = new Date(year, month, day);
                if (this.isInRange(currentDayDate)) {
                    if (this.isSameDate(currentDayDate, this.selectedStartDate) ||
                        this.isSameDate(currentDayDate, this.selectedEndDate)) {
                        dayElement.classList.add('selected');
                    } else {
                        dayElement.classList.add('in-range');
                    }
                }

                dayElement.addEventListener('click', () => this.handleDateClick(currentDayDate));
                grid.appendChild(dayElement);
            }
            document.getElementById('currentMonth').textContent =
                `${this.currentDate.toLocaleString('default', { month: 'long' })} ${year}`;
        }

        attachEventListeners() {
            document.getElementById('prevMonth').addEventListener('click', () => {
                this.currentDate.setMonth(this.currentDate.getMonth() - 1);
                this.renderCalendar();
            });

            document.getElementById('nextMonth').addEventListener('click', () => {
                this.currentDate.setMonth(this.currentDate.getMonth() + 1);
                this.renderCalendar();
            });
        }

        handleDateClick(date) {
            if (!this.selectedStartDate || this.selectedEndDate) {
                this.selectedStartDate = date;
                this.selectedEndDate = null;
            } else {
                if (date < this.selectedStartDate) {
                    this.selectedEndDate = this.selectedStartDate;
                    this.selectedStartDate = date;
                } else {
                    this.selectedEndDate = date;
                }
            }

            // Update hidden inputs for form submission
            document.getElementById('startDate').value = this.formatDate(this.selectedStartDate);
            if (this.selectedEndDate) {
                document.getElementById('endDate').value = this.formatDate(this.selectedEndDate);
            }

            this.renderCalendar();
        }

        formatDate(date) {
            if (!date) return '';
            return date.toISOString().split('T')[0];
        }

        isInRange(date) {
            if (!this.selectedStartDate) return false;
            if (!this.selectedEndDate) return this.isSameDate(date, this.selectedStartDate);
            return date >= this.selectedStartDate && date <= this.selectedEndDate;
        }

        isSameDate(date1, date2) {
            return date1.getDate() === date2.getDate() &&
                   date1.getMonth() === date2.getMonth() &&
                   date1.getFullYear() === date2.getFullYear();
        }
    }

    // Initialize calendar when document is ready
    document.addEventListener('DOMContentLoaded', () => {
        new Calendar();
    });


</script>

@section Scripts {


    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}